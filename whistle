#!/usr/bin/env perl
use strict;
use warnings;
use Curses::UI;
use MP3::Info;
use Storable qw(nstore retrieve);
use File::Find;
use IPC::Open2;
use Curses qw(KEY_LEFT KEY_RIGHT KEY_F getmaxyx initscr endwin);
use File::MimeInfo qw(mimetype describe);
use Digest::MD5 qw(md5_hex);

# project:          whistle
# author:           see AUTHORS
# license:          see LICENSE
# purpose:          see README

# data location, hashref declaratiion, global vars
our $STORFILE = $ENV{'HOME'} . "/.whistle.dat";
our $STORAGE;               # storage hashref
our $SHUFFLE = 0;           # 0 = normal, 1 = random
our $CUR_LIST = 'ALL';      # current playlist
our $LAST_PLAYED = 0;
our $real_order;

# vars for mplayer's 10band equalizer (allowed: -12 <-> 12)
our @EQ = (0,0,0,0,0,0,0,0,0,0);

my ($dir_add, $dir_rem, $pl_add, $pl_del, $sel_pl);
my $num_songs = 0;
our $MAX_PL;
our $STATE = 0;

# turn on autoflush
$| = 1;

# don't hard code mplayer location
open( my $WHICH, "which mplayer 2>/dev/null |" );
chomp( my( $mplayer ) = <$WHICH> );
close( $WHICH );

# open read and write handles for mpv
my $MPLPID = open2(my $Mout, my $Min, "$mplayer -idle -slave &> /dev/null") or die "mplayer hates me :(";


# read in data if available, otherwise initialise STORAGE hashref
if (-e $STORFILE && (stat $STORFILE)[7] > 5) {
    $STORAGE = retrieve $STORFILE;
    $real_order = $STORAGE->{'real_order'};
}
else {
    $STORAGE = { 'DIRS' => [], 'PLAYLIST' => {}};
    $STORAGE->{'PLAYLIST'}{'ALL'} = {};
    $STORAGE->{'real_order'} = {};
}
initscr();

my ( $row, $col );
getmaxyx( $row, $col );
endwin();
print "your terminal windows' height is too low! (26 rows needed, you have $row)\n" and exit(0) if $row < 26;
print "your terminal windows' length is too low! (105 cols needed, you have $col)\n" and exit(0) if $col < 105;
# create the main ui and main window
my $cui = new Curses::UI ( -clear_on_exit => 0, -color_support => 1);
my $win = $cui->add('win', 'Window', -border => 1, -title => "whistle");


# create current playlist 'window'
my $curlist = $win->add( 
    'curlist', 'Listbox',
    -fg => 'white',
    -multi => 1,
    -title => "Playlist: $CUR_LIST",
    -readonly => 1,
    -y => 5,
    -x => int ($win->width() / 3) + 1,
    -focusable => 1,
    -nocursor => 0,
    -vscrollbar => 'right',
    -wrapping => 1,
    -width => int ($win->width() * 0.66),
    -intellidraw => 1,
    -border => 1,
    -ipad => 1,
    -htmltext => 1,
) or die "curlist";

# create controls 'window'
my $equalizer = $win->add( 
    'controls', 'TextViewer',
    -fg => 'white',
    -title => ".: Equalizer :. (Use F1-F10 to configure)",
    -readonly => 1,
    -y => 1,
    -x => 1,
    -focusable => 0,
    -wrapping => 0,
    -height => 4,
    -width => int ($win->width() / 2),
    -intellidraw => 1,
    -border => 1,
) or die "controls";

# create playlist 'window'
my $playlists = $win->add( 
    'playlists', 'TextViewer',
    -fg => 'white',
    -title => ".: Playlists :. ('h' -> help)",
    -readonly => 1,
    -y => 5,
    -x => 1,
    -focusable => 0,
    -wrapping => 1,
    -height => 14,
    -width => int ($win->width() / 3),
    -intellidraw => 1,
    -border => 1,
    -ipad => 1,
) or die "playlists";

# create directory 'window'
my $directories = $win->add( 
    'directories', 'TextViewer',
    -fg => 'white',
    -title => ".: Directories :.",
    -readonly => 1,
    -y => 19,
    -x => 1,
    -focusable => 0,
    -wrapping => 1,
    -height => 8,
    -width => int ($win->width() / 3),
    -intellidraw => 1,
    -border => 1,
    -ipad => 1,
) or die "directories";

my $progressbar = $win->add(
    'progress', 'Progressbar',
    -max       => 100,
    -pos       => 0,
    -y => 1,
    -x => int($win->width() / 2 + 1),
    -focusable => 0,
    -wrapping => 1,
    -height => 3,
    -width => int ($win->width() / 2 - 1),
    -intellidraw => 1,
    -title => ".: Progress :.",
    -border => 1,
) or die "progressbar";

# pretty nasty shit, but neccessary for continuous playing
our $TIMER = {'rest_time' => 0, 'max_time' => 0};
$SIG{ALRM} = sub { 
    $TIMER->{'rest_time'}--;
    my $one_perc = $TIMER->{'max_time'} / 100;
    my $new_pro = int(($TIMER->{'max_time'} - $TIMER->{'rest_time'}) / $one_perc);
    $progressbar->pos($new_pro);
    $progressbar->draw();
    if ($TIMER->{'rest_time'} <= 0) {
        &play('NEXT'); 
    }
    else {
        alarm(1);
    }
};

# draw the menu
sub draw_menu {
    $curlist->clear_selection();
    my $dirtxt;
    if (scalar @{$STORAGE->{'DIRS'}}) {
        for (@{$STORAGE->{'DIRS'}}) {
            $dirtxt .= "$_\n";
        }
    }
    else {
        $dirtxt = "no directories given";
    }
    $directories->text($dirtxt);
    $directories->draw();
    my $pltxt;
    $playlists->text('');
    $playlists->draw();
    $pltxt .= $CUR_LIST eq 'ALL' ? "[*] " : "[ ] ";
    $pltxt .= "ALL";
    $pltxt .= sprintf("  (%d)\n", scalar keys %{$STORAGE->{'PLAYLIST'}{'ALL'}});
    for (grep {!/ALL/} sort keys %{$STORAGE->{'PLAYLIST'}}) {
        $pltxt .= $CUR_LIST eq $_ ? "[*] " : "[ ] ";
        $pltxt .= "\'-> $_";
        $pltxt .= sprintf("  (%d)\n", scalar keys %{$STORAGE->{'PLAYLIST'}{$_}});
    }
    $playlists->text($pltxt);
    $playlists->draw();
    my %pl;
    $curlist->values('');
    my $pl_w = int($curlist->width() / 9);
    my ($pl_t, $pl_a, $pl_al, $pl_d) = (int($pl_w * 2) , int($pl_w * 1), int($pl_w * 2), int ($pl_w));
    $pl_t = "$pl_t.$pl_t" . "s";
    $pl_a = "$pl_a.$pl_a" . "s";
    $pl_al = "$pl_al.$pl_al" . "s";
    $pl_d = "$pl_d.$pl_d" . "s";

    if (%{$STORAGE->{'PLAYLIST'}{$CUR_LIST}}) {
        for (sort keys %{$real_order->{$CUR_LIST}}) {
            if (defined $STORAGE->{'PLAYLIST'}{$CUR_LIST}{$real_order->{$CUR_LIST}{$_}}{'title'}) {
                my $full_line = sprintf(" %$pl_t | %$pl_a | %$pl_al | %$pl_d",  $STORAGE->{'PLAYLIST'}{$CUR_LIST}{$real_order->{$CUR_LIST}{$_}}{'title'}, 
                                                      $STORAGE->{'PLAYLIST'}{$CUR_LIST}{$real_order->{$CUR_LIST}{$_}}{'artist'}, 
                                                      $STORAGE->{'PLAYLIST'}{$CUR_LIST}{$real_order->{$CUR_LIST}{$_}}{'album'}, 
                                                      $STORAGE->{'PLAYLIST'}{$CUR_LIST}{$real_order->{$CUR_LIST}{$_}}{'duration'});
                $pl{$_} = $full_line;
            }
        }
        for (sort keys %pl) {
            $curlist->insert_at($_, $pl{$_});
        }
    }
    else {
        $curlist->values("no files found, please add a music directory");
    }
    $curlist->values(sort keys %pl);
    $curlist->labels(\%pl);
    $curlist->draw();
    $equalizer->text(sprintf("%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\n", 1 .. 10) .
                     sprintf("%4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f\n", @EQ));
    $equalizer->draw();
    $progressbar->draw();
}

# store the storage hashref to .whistle.dat
sub store_data {
    $STORAGE->{'real_order'} = $real_order;
    nstore($STORAGE, $STORFILE);
}


# quit the program, close filehandles, store data
sub quit_program {
    print $Min "quit\n";
    close $Min;
    close $Mout;
    $cui->exit_curses();
    kill $MPLPID;
    store_data();
    exit(0);
}

# find-function for found mp3's. writes returned data to storage hashref
sub found_mp3 {
    my $mime = mimetype($File::Find::name);
    my $mime_long = describe($mime);
    if ($mime_long =~ m/.*MP3 audio.*/) {
        my $md5sum = md5_hex($File::Find::name);
        $real_order->{'ALL'}{$num_songs} = $md5sum; 
        my $taghash = get_mp3tag($File::Find::name);
        my $infohash = get_mp3info($File::Find::name);
        my $esc_name = $File::Find::name;
        $esc_name =~ s/ /\\ /g;
        $STORAGE->{'PLAYLIST'}{'ALL'}{$md5sum}{'filename'} = $esc_name;
        $STORAGE->{'PLAYLIST'}{'ALL'}{$md5sum}{'artist'} = $taghash->{ARTIST} || "N/A";
        $STORAGE->{'PLAYLIST'}{'ALL'}{$md5sum}{'album'} = $taghash->{ALBUM} || "N/A";
        $STORAGE->{'PLAYLIST'}{'ALL'}{$md5sum}{'title'} = $taghash->{TITLE} || "N/A";
        $STORAGE->{'PLAYLIST'}{'ALL'}{$md5sum}{'duration'} = sprintf("%02d:%02d", 
                                                                        $infohash->{MM} || 0, $infohash->{SS} || 0);
        $STORAGE->{'PLAYLIST'}{'ALL'}{$md5sum}{'duration_s'} = sprintf("%d", ($infohash->{MM} || 0) * 60 + ($infohash->{SS} || 0));
        $num_songs++;
    }
}

# func: add_dir
# adds a new directory to the STORAGE hashref.
sub add_dir {
    $dir_add = $cui->question('Please enter the path to your music directory');
    if (defined $dir_add && -d $dir_add && length $dir_add) {
        unless (grep {/^$dir_add$/} @{$STORAGE->{'DIRS'}}) {
            push @{$STORAGE->{'DIRS'}}, $dir_add;
            &rescan_dirs();
        }
    }
    &draw_menu();
}

# rescan collection
sub rescan_dirs {
    $num_songs = 0;
    if (scalar @{$STORAGE->{'DIRS'}}) {
        find(\&found_mp3, @{$STORAGE->{'DIRS'}});
    }
    else {
        $STORAGE->{'PLAYLIST'}{'ALL'} = undef;
    }
    &draw_menu();
}

# func: new_pl
# creates a new playlist with an empty hashref ready for filling
sub new_pl {
    $pl_add = $cui->question('Please enter a name (a-zA-Z0-9_) for the new playlist');
    if ($pl_add =~ m/^[a-zA-Z0-9_]+$/ && length $pl_add) {
        unless (grep {/^$pl_add$/} keys %{$STORAGE->{'PLAYLIST'}}) {
            $STORAGE->{'PLAYLIST'}{$pl_add} = {};
        }
    }
    &draw_menu();
}

# func: rem_dir
# removes a music directory from the STORAGE hashref.
sub rem_dir {
    $dir_rem = $cui->question('Please specify the directory you want to remove');
    @{$STORAGE->{'DIRS'}} = grep {!/^$dir_rem$/} @{$STORAGE->{'DIRS'}};
    $num_songs = 0;
    if (scalar @{$STORAGE->{'DIRS'}}) {
        find(\&found_mp3, @{$STORAGE->{'DIRS'}});
    }
    else { 
        $STORAGE->{'DIRS'} = [];
        $STORAGE->{'PLAYLIST'}{'ALL'} = {};
    }
    &draw_menu();
}

# func: del_pl
# deletes a playlist. the 'ALL' playlist must not be deleted!
sub del_pl {
    $pl_del = $cui->question('Please enter the name of the playlist you want to delete');
    unless ($pl_del eq "ALL") {
        if (exists $STORAGE->{'PLAYLIST'}{$pl_del}) {
            delete $STORAGE->{'PLAYLIST'}{$pl_del};
        }
    }
    &draw_menu();
}

# plays the selected item or next/prev if given
sub play {
    print $Min "stop\n";
    $MAX_PL = (scalar (keys %{$STORAGE->{'PLAYLIST'}{$CUR_LIST}})) - 1;
    return if $MAX_PL < 0;
    my $next = shift || '';
    my ($index, $cur);
    if ($next eq 'NEXT') {
        $LAST_PLAYED = (($curlist->id())[0] || $LAST_PLAYED);
        $index = $SHUFFLE ? int(rand($MAX_PL)) : (($curlist->id())[0] || $LAST_PLAYED) + 1;
        $LAST_PLAYED = $index;
        $index = $index > $MAX_PL ? 0 : $index;
        $curlist->clear_selection();
        $curlist->set_selection($index);
        $cur = ($curlist->get())[0];
    }
    elsif ($next eq 'PREV') {
        $index = $SHUFFLE ? int(rand($MAX_PL)) : (($curlist->id())[0] || $LAST_PLAYED) - 1;
        $LAST_PLAYED = $index;
        $index = $index < 0 ? $MAX_PL : $index;
        $curlist->clear_selection();
        $curlist->set_selection(($LAST_PLAYED && $SHUFFLE) ? $LAST_PLAYED : $index);
        $cur = ($curlist->get())[0];
        $LAST_PLAYED = ($curlist->id())[0] || $LAST_PLAYED;
    }
    else {
        $index = ($curlist->id())[0] || '0';
        $curlist->set_selection($index);
        $cur = ($curlist->get())[0];
        $curlist->clear_selection();
        $curlist->set_selection($index);
        $LAST_PLAYED = $index;
    }
    my $file = $STORAGE->{'PLAYLIST'}{$CUR_LIST}{$real_order->{$CUR_LIST}{$cur}}{'filename'};
    my $track = $STORAGE->{'PLAYLIST'}{$CUR_LIST}{$real_order->{$CUR_LIST}{$cur}}{'title'} || '';
    my $art = $STORAGE->{'PLAYLIST'}{$CUR_LIST}{$real_order->{$CUR_LIST}{$cur}}{'artist'} || '';
    if ($file) {
        $curlist->title("Playlist: $CUR_LIST ( S: $SHUFFLE ):: now playing: " . $track . " by $art");
        $curlist->clear_selection();
        $curlist->draw();
        print $Min "loadfile $file\n";
        open my $GNA, ">> /tmp/gna.txt";
        print $GNA "loadfile $file\n";
        close $GNA;
        my $altime = $STORAGE->{'PLAYLIST'}{$CUR_LIST}{$real_order->{$CUR_LIST}{$cur}}{'duration_s'} || '0';
        $TIMER->{'rest_time'} = $altime;
        $TIMER->{'max_time'} = $altime;
        alarm(1);
    }
    else {
        $curlist->title("Playlist: $CUR_LIST ( S: $SHUFFLE ):: ERROR - Could not find file for position $cur");
        $curlist->clear_selection();
        $curlist->draw();
    }
}

# stop the current track, deactivate alarm
sub stop {
    print $Min "stop\n";
    $curlist->title("Playlist: $CUR_LIST :: STOPPED");
    $curlist->draw();
    alarm(0);
}

# pause the track, save alarm time, restart alarm if unpaused
our $rest_altime;
sub pause {
    print $Min "pause\n";
    $STATE = $STATE ? 0 : 1;
    if ($STATE == 1) {
        $rest_altime = $TIMER->{'rest_time'};
        alarm(0);
    }
    else {
        $TIMER->{'rest_time'} = $rest_altime;
        alarm(1);
    }
}

# add currently selected track to playlist
sub add_to_pl {
    my @num = $curlist->get();
    return unless @num;
    $sel_pl = $win->add(
            'sel_pl', 'Listbox',
            -values    => [grep {!/ALL/} keys %{$STORAGE->{'PLAYLIST'}}],
            -radio     => 1,
            -y => int ($win->height() / 2),
            -x => int ($win->width() / 4) + 5,
            -focusable => 1,
            -height => 10,
            -width => 60,
            -border => 1,
            -ipad => 2,
    );
    $sel_pl->title('Please choose the playlist, and press TAB');
    $sel_pl->draw();
    $sel_pl->modalfocus();
    my $selected = $sel_pl->get();
    $sel_pl->loose_focus();
    $win->delete('sel_pl');
    if (defined $selected) {
        for (@num) {
            $real_order->{$selected}{$_} = $real_order->{'ALL'}{$_};
            $STORAGE->{'PLAYLIST'}{$selected}{$real_order->{$selected}{$_}} = $STORAGE->{'PLAYLIST'}{'ALL'}{$real_order->{$CUR_LIST}{$_}};
        }
    }
}

# switch playlist
sub switch_pl {
    $sel_pl = $win->add(
            'sel_pl', 'Listbox',
            -values    => [keys %{$STORAGE->{'PLAYLIST'}}],
            -radio     => 1,
            -y => int ($win->height() / 2),
            -x => int ($win->width() / 4) + 5,
            -focusable => 1,
            -height => 10,
            -width => 60,
            -border => 1,
            -ipad => 2,
    );
    $sel_pl->title('Please choose the playlist, and press TAB');
    $sel_pl->draw();
    $sel_pl->modalfocus();
    my $selected = $sel_pl->get();
    $sel_pl->loose_focus();
    $win->delete('sel_pl');
    $CUR_LIST = $selected  || 'ALL';  
    $curlist->title("Playlist: $CUR_LIST");
    &draw_menu();
}

# play next item in list
sub next { &play('NEXT'); }

# play previous item in list 
sub prev { &play('PREV'); }

# toggle shuffle, 1 = shuffle, 0 = normal playlist order
sub toggle_shuffle { $SHUFFLE = $SHUFFLE ? 0 : 1; $curlist->draw();}

# seek 10 seconds forward in music stream
sub seek_right {
    print $Min "seek 10\n";
    my $newal = $TIMER->{'rest_time'};
    if ($newal > 10) {
        $newal -= 10 ;
    }
    else { $newal = 1; }
    $TIMER->{'rest_time'} = $newal;
}

# seek 10 seconds back in music stream
sub seek_left {
    my $newal = $TIMER->{'rest_time'};
    if ($newal > 10) {
        print $Min "seek -10\n";
        $newal += 10;
    }
    $TIMER->{'rest_time'} = $newal;
}

# delete the currently selected item from the currently selected playlist
sub del_from_pl {
    my @to_del = $curlist->get();
    return unless @to_del;
    for (@to_del) {
        if (exists $STORAGE->{'PLAYLIST'}{$CUR_LIST}{$real_order->{$CUR_LIST}{$_}}) {
            delete $STORAGE->{'PLAYLIST'}{$CUR_LIST}{$real_order->{$CUR_LIST}{$_}};
            delete $real_order->{$CUR_LIST}{$_};
        }
    }
    &draw_menu();    
}

sub b1_switch {
    my $new_b1 = $cui->question("Please enter the new value for freq: 31.25Hz (currently $EQ[0]dB)");
    if (defined $new_b1 && $new_b1 < 12.01 && $new_b1 > -12.01) {
        $EQ[0] = $new_b1;
    }
    $equalizer->text(sprintf("%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\n", 1 .. 10) .
                     sprintf("%4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f\n", @EQ));
    $equalizer->draw();
    my $eq_str = join ":", @EQ;
    print $Min "af equalizer=$eq_str\n";
}

sub b2_switch {
    my $new_b2 = $cui->question("Please enter the new value for freq: 62.50Hz (currently $EQ[1]dB)");
    if (defined $new_b2 && $new_b2 < 12.01 && $new_b2 > -12.01) {
        $EQ[1] = $new_b2;
    }
    $equalizer->text(sprintf("%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\n", 1 .. 10) .
                     sprintf("%4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f\n", @EQ));
    $equalizer->draw();
    my $eq_str = join ":", @EQ;
    print $Min "af equalizer=$eq_str\n";
}

sub b3_switch {
    my $new_b3 = $cui->question("Please enter the new value for freq: 125.0Hz (currently $EQ[2]dB)");
    if (defined $new_b3 && $new_b3 < 12.01 && $new_b3 > -12.01) {
        $EQ[2] = $new_b3;
    }
    $equalizer->text(sprintf("%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\n", 1 .. 10) .
                     sprintf("%4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f\n", @EQ));
    $equalizer->draw();
    my $eq_str = join ":", @EQ;
    print $Min "af equalizer=$eq_str\n";
}

sub b4_switch {
    my $new_b4 = $cui->question("Please enter the new value for freq: 250.0Hz (currently $EQ[3]dB)");
    if (defined $new_b4 && $new_b4 < 12.01 && $new_b4 > -12.01) {
        $EQ[3] = $new_b4;
    }
    $equalizer->text(sprintf("%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\n", 1 .. 10) .
                     sprintf("%4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f\n", @EQ));
    $equalizer->draw();
    my $eq_str = join ":", @EQ;
    print $Min "af equalizer=$eq_str\n";
}

sub b5_switch {
    my $new_b5 = $cui->question("Please enter the new value for freq: 500.0Hz (currently $EQ[4]dB)");
    if (defined $new_b5 && $new_b5 < 12.01 && $new_b5 > -12.01) {
        $EQ[4] = $new_b5;
    }
    $equalizer->text(sprintf("%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\n", 1 .. 10) .
                     sprintf("%4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f\n", @EQ));
    $equalizer->draw();
    my $eq_str = join ":", @EQ;
    print $Min "af equalizer=$eq_str\n";
}
sub b6_switch {
    my $new_b6 = $cui->question("Please enter the new value for freq: 1.0kHz (currently $EQ[5]dB)");
    if (defined $new_b6 && $new_b6 < 12.01 && $new_b6 > -12.01) {
        $EQ[5] = $new_b6;
    }
    $equalizer->text(sprintf("%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\n", 1 .. 10) .
                     sprintf("%4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f\n", @EQ));
    $equalizer->draw();
    my $eq_str = join ":", @EQ;
    print $Min "af equalizer=$eq_str\n";
}

sub b7_switch {
    my $new_b7 = $cui->question("Please enter the new value for freq: 2.0kHz (currently $EQ[6]dB)");
    if (defined $new_b7 && $new_b7 < 12.01 && $new_b7 > -12.01) {
        $EQ[6] = $new_b7;
    }
    $equalizer->text(sprintf("%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\n", 1 .. 10) .
                     sprintf("%4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f\n", @EQ));
    $equalizer->draw();
    my $eq_str = join ":", @EQ;
    print $Min "af equalizer=$eq_str\n";
}

sub b8_switch {
    my $new_b8 = $cui->question("Please enter the new value for freq: 4.0kHz (currently $EQ[7]dB)");
    if (defined $new_b8 && $new_b8 < 12.01 && $new_b8 > -12.01) {
        $EQ[7] = $new_b8;
    }
    $equalizer->text(sprintf("%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\n", 1 .. 10) .
                     sprintf("%4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f\n", @EQ));
    $equalizer->draw();
    my $eq_str = join ":", @EQ;
    print $Min "af equalizer=$eq_str\n";
}

sub b9_switch {
    my $new_b9 = $cui->question("Please enter the new value for freq: 8.0kHz (currently $EQ[8]dB)");
    if (defined $new_b9 && $new_b9 < 12.01 && $new_b9 > -12.01) {
        $EQ[8] = $new_b9;
    }
    $equalizer->text(sprintf("%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\n", 1 .. 10) .
                     sprintf("%4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f\n", @EQ));
    $equalizer->draw();
    my $eq_str = join ":", @EQ;
    print $Min "af equalizer=$eq_str\n";
}

sub b10_switch {
    my $new_b10 = $cui->question("Please enter the new value for freq: 16.0kHz (currently $EQ[9]dB)");
    if (defined $new_b10 && $new_b10 < 12.01 && $new_b10 > -12.01) {
        $EQ[9] = $new_b10;
    }
    $equalizer->text(sprintf("%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\n", 1 .. 10) .
                     sprintf("%4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f %4.1f\n", @EQ));
    $equalizer->draw();
    my $eq_str = join ":", @EQ;
    print $Min "af equalizer=$eq_str\n";
}

sub help {
    $cui->dialog("P - Play selected song\n" .
                 "p - pause\n" . "n - play next song\n" . "r - play previous song\n" . 
                 "S - Stop playing\n". "t - toggle shuffle\n" . "e - rescan directories\n" .
                 "Q - Quit\n\n" . "a - add to playlist\n" . "d - delete from playlist\n" .
                 "s - switch to playlist\n" . "A - Add directory\n" . "R - Remove directory\n" .
                 "N - New playlist\n" . "D - Delete playlist\n\n" .
                 "SPACE or ENTER to select, TAB to confirm -  LEFT / RIGHT Arrow Key seek +-10s"
    );
}

# define keybindings, draw menu for first time, start main loop :)
$cui->set_binding(\&help, "h");
$cui->set_binding(\&quit_program, "Q");
$cui->set_binding(\&add_dir, "A");
$cui->set_binding(\&rem_dir, "R");
$cui->set_binding(\&del_pl, "D");
$cui->set_binding(\&new_pl, "N");
$cui->set_binding(\&play, "P" );
$cui->set_binding(\&pause, "p" );
$cui->set_binding(\&add_to_pl, "a" );
$cui->set_binding(\&del_from_pl, "d" );
$cui->set_binding(\&switch_pl, "s" );
$cui->set_binding(\&next, "n" );
$cui->set_binding(\&prev, "r" );
$cui->set_binding(\&toggle_shuffle, "t" );
$cui->set_binding(\&stop, "S" );
$cui->set_binding(\&rescan_dirs, "e" );
$cui->set_binding(\&seek_right, KEY_RIGHT );
$cui->set_binding(\&seek_left, KEY_LEFT );

$cui->set_binding(\&b1_switch, KEY_F(1) );
$cui->set_binding(\&b2_switch, KEY_F(2) );
$cui->set_binding(\&b3_switch, KEY_F(3) );
$cui->set_binding(\&b4_switch, KEY_F(4) );
$cui->set_binding(\&b5_switch, KEY_F(5) );
$cui->set_binding(\&b6_switch, KEY_F(6) );
$cui->set_binding(\&b7_switch, KEY_F(7) );
$cui->set_binding(\&b8_switch, KEY_F(8) );
$cui->set_binding(\&b9_switch, KEY_F(9) );
$cui->set_binding(\&b10_switch, KEY_F(10) );

&draw_menu();
$cui->mainloop();
